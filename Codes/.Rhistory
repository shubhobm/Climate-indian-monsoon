# X = scale(X, scale=F)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(121,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=sig)
# x = runif(n)
# X = cbind(x, x+rnorm(n, sd=.001))
# X = scale(X, scale=F)
# PCA before contamination
(p.pure <- princomp(X)); p.pure$loadings
d1 = EPQD1(X, X)
X1 = X
for(i in 1:nrow(X1)){
X1[i,] = X1[i,]/sqrt(sum(X1[i,]^2))
}
Xrank = X1
Xrank = X1 * (max(d1[,3]) - d1[,3])
(p.rank = princomp(Xrank)); p.rank$loadings
(p.rank$sdev[1]/p.rank$sdev[2])^2
Xrank = X1
(p.rank = princomp(Xrank)); p.rank$loadings
(p.rank$sdev[1]/p.rank$sdev[2])^2
Xrank = X1 * (max(d1[,3]) - d1[,3])
(p.rank = princomp(Xrank)); p.rank$loadings
(p.rank$sdev[1]/p.rank$sdev[2])^2
n = 1e3
set.seed(120214)
# x = rnorm(n)
# X = cbind(x, 2*x)
# X = scale(X, scale=F)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(25,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=sig)
# x = runif(n)
# X = cbind(x, x+rnorm(n, sd=.001))
# X = scale(X, scale=F)
# PCA before contamination
(p.pure <- princomp(X)); p.pure$loadings
d1 = EPQD1(X, X)
X1 = X
for(i in 1:nrow(X1)){
X1[i,] = X1[i,]/sqrt(sum(X1[i,]^2))
}
Xrank = X1
(p.rank = princomp(Xrank)); p.rank$loadings
(p.rank$sdev[1]/p.rank$sdev[2])^2
Xrank = X1 * (max(d1[,3]) - d1[,3])
(p.rank = princomp(Xrank)); p.rank$loadings
(p.rank$sdev[1]/p.rank$sdev[2])^2
(p.rank$sdev[1]/p.rank$sdev[2])
n = 1e3
set.seed(120214)
# x = rnorm(n)
# X = cbind(x, 2*x)
# X = scale(X, scale=F)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(25,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=sig)
# x = runif(n)
# X = cbind(x, x+rnorm(n, sd=.001))
# X = scale(X, scale=F)
# PCA before contamination
(p.pure <- princomp(X)); p.pure$loadings
d1 = EPQD1(X, X)
X1 = X
for(i in 1:nrow(X1)){
X1[i,] = X1[i,]/sqrt(sum(X1[i,]^2))
}
Xrank = X1
(p.rank = princomp(Xrank)); p.rank$loadings
(p.rank$sdev[1]/p.rank$sdev[2])
a=rchisq(1e3,1)
b=rchisq(1e3,1)
mean(a)
mean(b)
d=25*a+b
d
mean(a/d)
mean(b/d)
mean(a)
mean(b)
mean(25*a/d)
plot(b)
hist(b)
plot(density(b))
d1=a+b
mean(a/d1)
mean(b/d1)
d2=d1/d
mean(d1)
mean(d2)
mean(b/d1*d2)
mean(b/d)
mean(25*a/d1*d2)
mean(25*a/d)
mean(25*a/d1)*mean(d2)
mean(b/d1)*mean(d2)
s1=5*rnorm(1e3)
s1=rnorm(1e3)
s1=5*rnorm(1e3)
s2=rnorm(1e3)
norm=s1^2+s2^2
s=cbind(s1/norm, s2/norm)
cov(s)
cov(cbind(s1,s2))
apply(s, 2, function(x) sqrt(sum(x^2)))
apply(s, 1, function(x) sqrt(sum(x^2)))
s[1,]
s1[1]
s2[1]
norm=sqrt(s1^2+s2^2)
s=cbind(s1/norm, s2/norm)
cov(s)
x=cbind(s1, s2)
cov(x)
cor(x)
cor(s)
my.mvrnorm = function(n, mu, Sigma){
p = length(mu)
# compute square root of covariance matrix
eo=eigen(Sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
# generate random normals from runif by box-muller transform
rnorm.vec = sqrt(-2*log(runif(n*p)))*cos(2*pi*runif(n*p))
# generate sample matrix
sample.matrix = matrix(rep(mu, n), nrow=n, byrow=T) +
matrix(rnorm.vec, nrow=n, ncol=p)%*%sigma.sqrt
return(sample.matrix)
}
ones = function(m,n){
matrix(1, nrow=m, ncol=n)
}
## function to calculate weighted projection quantile depth
EPQD1 = function(X, grid, nu=1e3){
p = ncol(X)
b = apply(X, 2, median)
X0 = X - ones(nrow(X),1) %*% b
grid0 = grid - ones(nrow(grid),1) %*% b
## get matrix of weighted PQDs for all points
npt = dim(grid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=nu)
# loop over nu pts on unit circle then take max
for(iu in 1:nu){
u = as.matrix(rnorm(p)); u = u/sqrt(sum(u^2))
uecdf = ecdf(X0%*%u)
Fuxu.mat[,iu] = uecdf(grid0%*%u)
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
return(cbind(grid,EPQD.vec))
}
wEPQD1 = function(X, grid, sig, nu=1e3){
p = ncol(X)
b = apply(X, 2, median)
X0 = X - ones(nrow(X),1) %*% b
grid0 = grid - ones(nrow(grid),1) %*% b
## get matrix of weighted PQDs for all points
npt = dim(grid)[1]
Fuxu.mat = matrix(0, nrow=npt, ncol=nu)
# loop over nu pts on unit circle then take max
for(iu in 1:nu){
u = as.matrix(rnorm(p)); u = u/sqrt(sum(u^2))
I.minus.Pu = diag(p) - u%*%t(u)
Xuperp = X0 %*% I.minus.Pu
scaled.perp = sqrt(Xuperp^2 %*% ones(ncol(X),1))
#w = ifelse(scaled.perp>sig, 0, 1)
#w = sig*exp(-scaled.perp/sig)
w = dnorm(scaled.perp, sd=sig)
#w = dcauchy(Xuperp, scale=sig)
uecdf = ecdf(w * (X0%*%u))
gridperp = grid0 %*% I.minus.Pu
scaled.gridperp = sqrt(gridperp^2 %*% ones(ncol(X),1))
#wu = ifelse(scaled.gridperp>sig, 0, 1)
#wu = sig*exp(-scaled.gridperp/sig)
wu = dnorm(scaled.gridperp, sd=sig)
#wu = dcauchy(sqrt(apply(xygrid^2,1,sum) - xygrid.u^2), scale=sig)
Fuxu.mat[,iu] = uecdf(wu * (grid0%*%u))
}
EPQD.vec = 1/(1+apply(abs(Fuxu.mat-.5), 1, max))
return(cbind(grid,EPQD.vec))
}
pcarank = function(X, ...){
X = as.matrix(X)
d1 = EPQD1(X, X)
X1 = X
for(i in 1:nrow(X1)){
X1[i,] = X1[i,]/sqrt(sum(X1[i,]^2))
}
Xrank = X1 * (1/d1[,3]-1)
princomp(Xrank, ...)
}
pcarank1D = function(X, ...){
X1 = apply(X,2,rank)
princomp(X1, ...)
}
d=EPQD1(x,x)
sd = s*(max(d[,3])-d[,3])
cov(sd)
cov(s)/cov(sd)
s11=s1/5
s12=s2
norm1 = sqrt(s11^2+s12^2)
s01 = cbind(s11/norm1, s12/norm1)
cov(s01)
var(norm1/norm)
plot(s01)
diag(c(5,1)) %*% cov(s01)
diag(c(5,1)) %*% cov(s01)/3
cov(s)
cov(s01*norm1/norm)
cov(s01*(ones(1,2)%*%norm1/norm))
cov(s01*(ones(2,1)%*%(norm1/norm)))
n = ones(2,1)%*%(norm1/norm)
head(n)
cov(s01*((norm1/norm) %*% ones(1,2)))
n = (norm1/norm) %*% ones(1,2)
head(n)
cov(s01*n)
cov(s01)
cov(s1)
cov(s)
apply(s01*n, 1, mean)
apply(s01*n, 2, mean)
apply(s01/n, 2, mean)
diag(25,1) %*% var(s01*n)
diag(25,1) %*% cov(s01*n)
cov(s01*n)
diag(c(25,1)) %*% cov(s01*n)
diag(c(25,1)) %*% cov(s01) * var(n)
head(n)
var(n[,1])
var(n)
?cov
cov(s01, norm1/norm)
cov(s01, norm/norm1)
var(s01)
var(s01*n)
head(n)
cov(s01,n)
diag(c(25,1)) %*% var(s01*n)
var(s01) * var(n)
a = matrix(rnorm(2e3), ncol=2)
b=rnorm(1e3)
cov(a,b)
cov(a*b)
cov(a)*var(b)
cov(s01*n)
cov(s01)*var(n)
cov(s01)*cov(n)
cov(a)
var(b)
b1=ones(1,2) %*% b
b1=ones(,) %*% b
b1=ones(2,1) %*% b
head(b1)
b1=t(ones(2,1) %*% b)
head(b1)
cov(a*b1)
cov(a) * cov(b1)
cov(b1)
cov(s01*n)
mean(s01[,1])
var(s01[,1])
var(s01[,1]*n[,1])
mean((s01[,1]*n[,1])^2)
var(s01[,1] * mean(n[,1]^2))
var(s01[,1]) * mean(n[,1]^2)
var(s01[,1])
mean(s01[,1]^2)
mean(s01[,1]^2) * mean(n[,1]^2)
mean(s01[,1]^2) * mean(n[,1]^2) - (mean(s01[,1])*mean(n[,1]))^2
mean(s01[,1]^2) * mean(n[,1]^2) - (mean(s01[,1]*n[,1]))^2
var(s01[,1] * n[,1])
mean(s01[,1]^2 * n[,1]^2) - (mean(s01[,1]*n[,1]))^2
mean(s01[,1]^2 * n[,1]^2)
mean(s01[,1]^2)
mean(n[,1]^2)
mean(s01[,1]^2 * n[,1]^2) / mean(s01[,1]^2)
mean(s01[,1]^2 * n[,1]^2) / mean(n[,1]^2)
cov(s01,n[,1])
cov(sd)
cov(s)/cov(sd)
n = 1e3
set.seed(120214)
# x = rnorm(n)
# X = cbind(x, 2*x)
# X = scale(X, scale=F)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(25,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=sig)
# x = runif(n)
# X = cbind(x, x+rnorm(n, sd=.001))
# X = scale(X, scale=F)
# PCA before contamination
(p.pure <- princomp(X)); p.pure$loadings
d1 = EPQD1(X, X)
X1 = X
for(i in 1:nrow(X1)){
X1[i,] = X1[i,]/sqrt(sum(X1[i,]^2))
}
Xrank = X1
Xrank = X1 * (max(d1[,3]) - d1[,3])
cov(Xrank)
cov(X)
n = 1e3
set.seed(120214)
# x = rnorm(n)
# X = cbind(x, 2*x)
# X = scale(X, scale=F)
Gamma = matrix(c(1,-1,1,1), nrow=2)/sqrt(2)
sig = Gamma %*% diag(c(25,1)) %*% t(Gamma)
X = my.mvrnorm(n, mu=c(0,0), Sig=2*sig)
# x = runif(n)
# X = cbind(x, x+rnorm(n, sd=.001))
# X = scale(X, scale=F)
# PCA before contamination
(p.pure <- princomp(X)); p.pure$loadings
d1 = EPQD1(X, X)
X1 = X
for(i in 1:nrow(X1)){
X1[i,] = X1[i,]/sqrt(sum(X1[i,]^2))
}
Xrank = X1
Xrank = X1 * (max(d1[,3]) - d1[,3])
cov(Xrank)
a=rchisq(1000,1)
b=rchisq(1000,1)
cov(a/(a+b),b/(a+b))
corr(a/(a+b),b/(a+b))
cor(a/(a+b),b/(a+b))
c=rchisq(1000,1)
s=a+b+c
cor(a/s,b/s)
cor(a/s,b/s,c/s)
cov(cbind(a/s,b/s,c/s))
cor(cbind(a/s,b/s,c/s))
install.packages("fastM")
require(fastM)
TYLERshape(matrix(rnorm(100),ncol=2))
X = matrix(rnorm(1e3), ncol=2)
cov(X)
TYLERshape(X)
X[91:100,] = X[91:100,] + 50
cov(X)
TYLERshape(X)
?TYLERshape
Sys.info()[4]
acos(NA)
acos(NaN)
X=MATRIC(0,2,2)
x=matrix(0,2,2)
x[,2]
class(x[,2])
pbp.2014 <- read.csv("C:/Study/My projects/Depth-scatter/Data/pbp-2014.csv")
View(pbp.2014)
nfl2014stats <- read.csv("C:/Study/My projects/Depth-scatter/Data/nfl2014stats.csv")
View(nfl2014stats)
nfl2013stats <- read.csv("C:/Study/My projects/Depth-scatter/Data/nfl2013stats.csv")
View(nfl2013stats)
plot(nfl2013stats[,5:8])
nfl2013lines <- read.csv("C:/Study/My projects/Depth-scatter/Data/nfl2013lines.csv")
View(nfl2013lines)
players_2013.12.12 <- read.csv("C:/Study/My projects/Depth-scatter/Data/players_2013-12-12.csv")
View(players_2013.12.12)
citation()
X=-2:.1:2
X=seq(-2,2,.01)
y = ifelse(abs(X)>1, 1, 3X^2-3X^4+X^6)
?abs
y = ifelse(abs(X)>1, 1, 3*X^2-3*X^4+X^6)
plot(y~X, tyle="l")
plot(y~X, type="l")
plot(y~X, type="l")
y=1/(1+X^2)
plot(y~X, type="l")
y=1/(1+abs(X))
plot(y~X, type="l")
train <- read.csv("C:/Study/My projects/Kaggle-restaurant/train.csv")
View(train)
hist(train$revenue)
summary(train$City)
summary(lmrevenow~., data=train[,-c(1:3)])
summary(lm(revenue~., data=train[,-c(1:3)]))
pairs(train[,21:25])
pairs(train[,21:30])
install.packages("kernlab")
# another example using the iris
data(iris)
test <- sample(1:150,20)
kpc <- kpca(~.,data=iris[-test,-5],kernel="rbfdot",
kpar=list(sigma=0.2),features=2)
#print the principal component vectors
pcv(kpc)
#plot the data projection on the components
plot(rotated(kpc),col=as.integer(iris[-test,5]),
xlab="1st Principal Component",ylab="2nd Principal Component")
library(kernlab)
data(iris)
test <- sample(1:150,20)
kpc <- kpca(~.,data=iris[-test,-5],kernel="rbfdot",
kpar=list(sigma=0.2),features=2)
#print the principal component vectors
pcv(kpc)
#plot the data projection on the components
plot(rotated(kpc),col=as.integer(iris[-test,5]),
xlab="1st Principal Component",ylab="2nd Principal Component")
?pcv
?rotated
west_nile_v5_400_2layer_mod2 <- read.csv("C:/Study/My projects/Kaggle-mosquito/codes/west_nile_v5_400_2layer_mod2.csv")
View(west_nile_v5_400_2layer_mod2)
GAM6_eNumMosRF_day4 <- read.csv("C:/Study/My projects/Kaggle-mosquito/codes/GAM6_eNumMosRF_day4.csv")
View(GAM6_eNumMosRF_day4)
khichuri = west_nile_v5_400_2layer_mod2
khichuri[,2] = (khichuri[,2] + GAM6_eNumMosRF_day4[,2])/2
options("scipen"=100, "digits"=8)
write.csv(khichuri,"khichuri.csv",row.names=FALSE,quote=FALSE)
west_nile_v55044 <- read.csv("C:/Users/Subho/Downloads/west_nile_v55044.csv")
View(west_nile_v55044)
west_nile_v6 <- read.csv("C:/Study/My projects/Kaggle-mosquito/codes/west_nile_v6.csv")
View(west_nile_v6)
khichuri = west_nile_v6
khichuri[,2] = (khichuri[,2] + west_nile_v55044[,2])/2
options("scipen"=100, "digits"=8)
write.csv(khichuri,"khichuri.csv",row.names=FALSE,quote=FALSE)
rm(list=ls())
#setwd("\\\\dfs.com/root/Dept-Decision/Dept-Users/Majumdar/Rain")
setwd('C:/Study/My projects/Climate-indian monsoon/Codes')
source('misc_functions.R')
library(rrcov)
library(fda.usc)
library(lme4)
library(MuMIn)
library(doSNOW)
library(parallel)
# read in data
rainsmall = read.csv("../data/rainsmall.csv")
# check full model
rainsmall[-(1:3)] = scale(rainsmall[-(1:3)])
varnames = names(rainsmall)[-(1:3)]
formula = paste(varnames, collapse="+")
random_terms = "+ (1|year)"
formula = as.formula(paste("log(PRCP+1) ~", formula, random_terms))
mod.full = lmer(formula, data=rainsmall)
summary(mod.full)
anova(mod.full)
r.squaredGLMM(mod.full)
y = getME(mod.full, 'y')
fixed = getME(mod.full, 'X') %*% fixef(mod.full)
eta = unlist(ranef(mod.full))
Z = t(as.matrix(getME(mod.full,'Zt')))
random = Z %*% eta
r = y - fixed - random
# bootstrap parameters
n = nrow(rainsmall)
nr = length(eta)
p = ncol(rainsmall)-3
sdn = n^(.2)
sdr = nr^(.2)
## loop to get drop 1 bootstrap estimates
loopfun = function(i){
require(lme4)
require(fda.usc)
iyb = fixed + (Z %*% (rnorm(nr)*sdr*eta) + rnorm(n)*sdn*r)/sqrt(1 - p/n)
SSPvec = rep(0,p)
# loop for all variables
for(j in 1:p){
# build model
jformula = paste(varnames[-j], collapse="+")
jformula = as.formula(paste("iyb ~", jformula, random_terms))
ijmod = lmer(jformula, data=rainsmall)
# extract coef and extend to lengthp by appending 0's
ibeta.j = as.numeric(coef(ijmod)$year[1,-1])
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
# get depth-based criterion
SSPvec[j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
SSPvec
}
# loop for full model bootstrap
# to get bootstrap distribution of parameters
nboot = 1e3
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
set.seed(07152015)
# create progress bar
pb <- txtProgressBar(min = 0, max = nboot, style = 3)
for(i in 1:nboot){
iyb = fixed + (Z %*% (rnorm(nr)*sdr*eta) + rnorm(n)*sdn*r)/sqrt(1 - p/n)
iformula = paste(varnames, collapse="+")
iformula = as.formula(paste("iyb ~", iformula, random_terms))
imod = lmer(iformula, data=rainsmall)
beta.mat[i,] = as.numeric(coef(imod)$year[1,-1])
setTxtProgressBar(pb, i)
}
close(pb)
SSPmat.d[,p+1] = mdepth.RP(beta.mat, beta.mat)$dep
cl <- makeCluster(detectCores()-2)
registerDoSNOW(cl)
system.time(SSPtab <- foreach(i=1:nboot) %dopar% loopfun(i))
SSPmat.d[,1:p] = matrix(unlist(SSPtab), ncol=p, byrow=T)
stopCluster(cl)
t = data.frame(cbind(apply(SSPmat.d, 2, mean), apply(SSPmat.d, 2, sd)))
rownames(t) = c(varnames,"full")
t
formula = paste(varnames[which(as.numeric(unlist(t[,1])) < t[nrow(t),1])], collapse="+")
formula = as.formula(paste("log(PRCP+1) ~", formula, random_terms))
mod.final = lmer(formula, data=rainsmall)
summary(mod.final)
anova(mod.final)
r.squaredGLMM(mod.final)
anova(mod.final, mod.full)
r.squaredGLMM(mod.full)
