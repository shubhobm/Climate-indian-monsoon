IC.mat = cbind(OutList[[1]]$IC.vec[,1], OutList[[2]]$IC.vec[,1],
OutList[[3]]$IC.vec[,1], OutList[[4]]$IC.vec[,1])
tau.vec = sqrt(1/OutList[[1]]$Cn.mat[,1])
for(i in 1:4){
#pdf(paste0('simplot',2*i,'.pdf'),4,4)
plot(tau.vec, OutList[[i]]$Cn.mat[,2], type='l', lwd=2,
xlab="tau", ylab="P(correct model)",
main=paste0("k=",2*i), col="blue", ylim=c(0,1))
#lines((1:20)/60, Corr.mat[,i], type='b', col="blue", lwd=2)
abline(h=IC.mat[1,i], col="red", lty=2, lwd=2)
abline(h=IC.mat[2,i], col="red", lwd=2)
abline(h=IC.mat[3,i], lty=2, lwd=2)
abline(h=IC.mat[4,i], lwd=2)
#dev.off()
}
par(mfrow=c(1,1))
for(i in 1:4){
pdf(paste0('simplot_gamma',2*i,'.pdf'),4,4)
plot(tau.vec, OutList[[i]]$Cn.mat[,2], type='l', lwd=2,
xlab="tau", ylab="P(correct model)",
main=paste0("k=",2*i), col="blue", ylim=c(0,1))
#lines((1:20)/60, Corr.mat[,i], type='b', col="blue", lwd=2)
abline(h=IC.mat[1,i], col="red", lty=2, lwd=2)
abline(h=IC.mat[2,i], col="red", lwd=2)
abline(h=IC.mat[3,i], lty=2, lwd=2)
abline(h=IC.mat[4,i], lwd=2)
#dev.off()
}
plot(tau.vec, OutList[[i]]$Cn.mat[,2], type='l', lwd=2,
xlab="tau", ylab="P(correct model)",
main=paste0("k=",2*i), col="blue", ylim=c(0,1))
#lines((1:20)/60, Corr.mat[,i], type='b', col="blue", lwd=2)
abline(h=IC.mat[1,i], col="red", lty=2, lwd=2)
abline(h=IC.mat[2,i], col="red", lwd=2)
abline(h=IC.mat[3,i], lty=2, lwd=2)
abline(h=IC.mat[4,i], lwd=2)
par(mfrow=c(2,2))
tau.vec = sqrt(1/OutList[[1]]$Cn.mat[,1])
for(i in 1:4){
pdf(paste0('simplot_gamma',2*i,'.pdf'),4,4)
plot(tau.vec, OutList[[i]]$Cn.mat[,2], type='l', lwd=2,
xlab="tau", ylab="P(correct model)",
main=paste0("k=",2*i), col="blue", ylim=c(0,1))
#lines((1:20)/60, Corr.mat[,i], type='b', col="blue", lwd=2)
abline(h=IC.mat[1,i], col="red", lty=2, lwd=2)
abline(h=IC.mat[2,i], col="red", lwd=2)
abline(h=IC.mat[3,i], lty=2, lwd=2)
abline(h=IC.mat[4,i], lwd=2)
#dev.off()
}
par(mfrow=c(1,1))
par(mfrow=c(2,2))
tau.vec = sqrt(1/OutList[[1]]$Cn.mat[,1])
for(i in 1:4){
pdf(paste0('simplot_gamma',2*i,'.pdf'),4,4)
plot(tau.vec, OutList[[i]]$Cn.mat[,2], type='l', lwd=2,
xlab="tau", ylab="P(correct model)",
main=paste0("k=",2*i), col="blue", ylim=c(0,1))
#lines((1:20)/60, Corr.mat[,i], type='b', col="blue", lwd=2)
abline(h=IC.mat[1,i], col="red", lty=2, lwd=2)
abline(h=IC.mat[2,i], col="red", lwd=2)
abline(h=IC.mat[3,i], lty=2, lwd=2)
abline(h=IC.mat[4,i], lwd=2)
dev.off()
}
par(mfrow=c(1,1))
load("D:/Study/My projects/Climate-indian-monsoon/Codes/outputs.rda")
## Sample analysis
## Adult income data from UCI repository
rm(list=ls())
#setwd("\\\\dfs.com/root/Dept-Decision/Dept-Users/Majumdar/Rain")
setwd('C:/Study/My projects/Climate-indian monsoon/Codes')
source('misc_functions.R')
library(rrcov)
library(fda.usc)
library(lme4)
library(MuMIn)
library(doSNOW)
library(parallel)
# read in data
rainsmall = read.csv("../data/rainsmall.csv")
long.list = rainsmall$LONGITUDE[1:36]
lat.list = rainsmall$LATITUDE[1:36]
## Sample analysis
## Adult income data from UCI repository
rm(list=ls())
#setwd("\\\\dfs.com/root/Dept-Decision/Dept-Users/Majumdar/Rain")
setwd('D:/Study/My projects/Climate-indian monsoon/Codes')
source('misc_functions.R')
library(rrcov)
library(fda.usc)
library(lme4)
library(MuMIn)
library(doSNOW)
library(parallel)
# read in data
rainsmall = read.csv("../data/rainsmall.csv")
rainsmall = read.csv("../Data/rainsmall.csv")
setwd('D:/Study/My projects/Climate-indian-monsoon/Codes')
setwd('D:/Study/My projects/Climate-indian-monsoon/Codes')
source('misc_functions.R')
library(rrcov)
library(fda.usc)
library(lme4)
library(MuMIn)
library(doSNOW)
library(parallel)
# read in data
rainsmall = read.csv("../Data/rainsmall.csv")
long.list = rainsmall$LONGITUDE[1:36]
lat.list = rainsmall$LATITUDE[1:36]
rainsmall[-(1:3)] = scale(rainsmall[-(1:3)])
varnames = names(rainsmall)[-(1:3)]
fixed.full = paste(varnames, collapse="+")
random_terms = "+ (1|year)"
form.full = as.formula(paste("log(PRCP+1) ~", fixed.full, random_terms))
mod.full = lmer(form.full, data=rainsmall)
summary(mod.full)
anova(mod.full)
r.squaredGLMM(mod.full)
y = getME(mod.full, 'y')
fixed = getME(mod.full, 'X') %*% fixef(mod.full)
eta = unlist(ranef(mod.full))
Z = t(as.matrix(getME(mod.full,'Zt')))
random = Z %*% eta
r = y - fixed - random
# bootstrap parameters
n = nrow(rainsmall)
nr = length(eta)
p = ncol(rainsmall)-3
sdn = n^(.1)
sdr = nr^(.1)
load("D:/Study/My projects/Climate-indian-monsoon/Codes/outputs.rda")
outputs
best.index = which.min(lapply(outputs, function(x) x[[3]]))
outputs[[best.index]][[1]]
mod = outputs[[best.index]][[2]]
## Sample analysis
## Adult income data from UCI repository
rm(list=ls())
#setwd("\\\\dfs.com/root/Dept-Decision/Dept-Users/Majumdar/Rain")
setwd('D:/Study/My projects/Climate-indian-monsoon/Codes')
source('misc_functions.R')
library(rrcov)
library(fda.usc)
library(lme4)
library(MuMIn)
library(doSNOW)
library(parallel)
# read in data
rainsmall = read.csv("../Data/rainsmall.csv")
long.list = rainsmall$LONGITUDE[1:36]
lat.list = rainsmall$LATITUDE[1:36]
# check full model
rainsmall[-(1:3)] = scale(rainsmall[-(1:3)])
varnames = names(rainsmall)[-(1:3)]
fixed.full = paste(varnames, collapse="+")
random_terms = "+ (1|year)"
form.full = as.formula(paste("log(PRCP+1) ~", fixed.full, random_terms))
mod.full = lmer(form.full, data=rainsmall)
summary(mod.full)
anova(mod.full)
r.squaredGLMM(mod.full)
# set up residuals
y = getME(mod.full, 'y')
fixed = getME(mod.full, 'X') %*% fixef(mod.full)
eta = unlist(ranef(mod.full))
Z = t(as.matrix(getME(mod.full,'Zt')))
random = Z %*% eta
r = y - fixed - random
# bootstrap parameters
n = nrow(rainsmall)
nr = length(eta)
p = ncol(rainsmall)-3
sdn = n^(.1)
sdr = nr^(.1)
Cn.frame = outputs[[best.index]][[1]]
load("D:/Study/My projects/Climate-indian-monsoon/Codes/bestmodel.rda")
Cn.frame = outputs[[best.index]][[1]]
best.index = which.min(lapply(outputs, function(x) x[[3]]))
Cn.frame = outputs[[best.index]][[1]]
Cn.frame
# final model
noneCn = Cn.frame$Cn[which(Cn.frame$DroppedVar == "<none>")]
which.final = which(apply(SSPmat.d, 2, mean) < noneCn)
fixed.final = paste(varnames[which.final], collapse="+")
form.final = as.formula(paste("log(PRCP+1) ~", fixed.final, random_terms))
mod.final = lmer(form.final, data=rainsmall)
summary(mod.final)
anova(mod.final)
r.squaredGLMM(mod.final)
anova(mod.final, mod.full)
mod.final = outputs[[best.index]][[2]]
set.seed(07222015)
pred.mat = matrix(0,1e2,2)
system.time(for(i in 1:1e2){
test = sample(1:n, ceiling(.1*n), replace=F)
mod.full.train = update(mod.full, subset=-test)
mod.final.train = update(mod.final, subset=-test)
ytest = log(rainsmall$PRCP[test]+1)
yhat.full = predict(mod.full.train, newdata=rainsmall[test,])
pred.mat[i,1] = mean((ytest - yhat.full)^2)
yhat.final = predict(mod.final.train, newdata=rainsmall[test,])
pred.mat[i,2] = mean((ytest - yhat.final)^2)
})
exp(apply(pred.mat, 2, median))-1
apply(pred.mat, 2, sd)
# future prediction
testyrs = 2003:2012
ntest = length(testyrs)
pred.mat.MSE = matrix(0, ncol=2, nrow=ntest)
pred.mat.bias = pred.mat.MSE
for (i in 1:ntest){
iyr = testyrs[i]
itrain = which(rainsmall$year >= iyr-25 & rainsmall$year < iyr)
itest = which(rainsmall$year == iyr)
testX = rainsmall[itest,-c(1:3)]
#mod.full.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.full)), data=rainsmall, subset=itrain)
#mod.final.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.final)), data=rainsmall, subset=itrain)
mod.full.train = lmer(form.full, data=rainsmall, subset=itrain)
mod.final.train = lmer(form.final, data=rainsmall, subset=itrain)
ytest = log(rainsmall$PRCP[itest]+1)
yhat.full = as.matrix(cbind(1, testX)) %*% as.numeric(fixef(mod.full.train))
diff.full = ytest - yhat.full
pred.mat.bias[i,1] = mean(diff.full)
pred.mat.MSE[i,1] = mean(diff.full^2)
yhat.final = as.matrix(cbind(1, testX[,which.final])) %*% as.numeric(fixef(mod.final.train))
diff.final = ytest - yhat.final
pred.mat.bias[i,2] = mean(diff.final)
pred.mat.MSE[i,2] = mean(diff.final^2)
}
?lmer
mod.final$formula
formula(mod.final)
model.names(mod.final)
mod.full.train = update(mod.full, subset=itrain)
best.index = which.min(lapply(outputs, function(x) x[[3]]))
Cn.frame = outputs[[best.index]][[1]]
mod.final = outputs[[best.index]][[2]]
summary(mod.final)
anova(mod.final)
r.squaredGLMM(mod.final)
anova(mod.final, mod.full)
mod.final = update(outputs[[best.index]][[2]], data=rainsmall)
load('bestmodel.rda')
best.index = which.min(lapply(outputs, function(x) x[[3]]))
Cn.frame = outputs[[best.index]][[1]]
mod.final = outputs[[best.index]][[2]]
summary(mod.final)
anova(mod.final)
r.squaredGLMM(mod.final)
anova(mod.final, mod.full)
testyrs = 2003:2012
ntest = length(testyrs)
pred.mat.MSE = matrix(0, ncol=2, nrow=ntest)
pred.mat.bias = pred.mat.MSE
for (i in 1:ntest){
iyr = testyrs[i]
itrain = which(rainsmall$year >= iyr-25 & rainsmall$year < iyr)
itest = which(rainsmall$year == iyr)
testX = rainsmall[itest,-c(1:3)]
#mod.full.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.full)), data=rainsmall, subset=itrain)
#mod.final.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.final)), data=rainsmall, subset=itrain)
mod.full.train = update(mod.full, subset=itrain)
mod.final.train = update(mod.final, subset=itrain)
ytest = log(rainsmall$PRCP[itest]+1)
yhat.full = as.matrix(cbind(1, testX)) %*% as.numeric(fixef(mod.full.train))
diff.full = ytest - yhat.full
pred.mat.bias[i,1] = mean(diff.full)
pred.mat.MSE[i,1] = mean(diff.full^2)
yhat.final = as.matrix(cbind(1, testX[,which.final])) %*% as.numeric(fixef(mod.final.train))
diff.final = ytest - yhat.final
pred.mat.bias[i,2] = mean(diff.final)
pred.mat.MSE[i,2] = mean(diff.final^2)
}
?getME
dim(getME(mod.full,"X"))
yhat.final = getME(mod.final.train,"X") %*% as.numeric(fixef(mod.final.train))
for (i in 1:ntest){
iyr = testyrs[i]
itrain = which(rainsmall$year >= iyr-25 & rainsmall$year < iyr)
itest = which(rainsmall$year == iyr)
testX = rainsmall[itest,-c(1:3)]
#mod.full.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.full)), data=rainsmall, subset=itrain)
#mod.final.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.final)), data=rainsmall, subset=itrain)
mod.full.train = update(mod.full, subset=itrain)
mod.final.train = update(mod.final, subset=itrain)
ytest = log(rainsmall$PRCP[itest]+1)
yhat.full = getME(mod.full.train,"X") %*% as.numeric(fixef(mod.full.train))
diff.full = ytest - yhat.full
pred.mat.bias[i,1] = mean(diff.full)
pred.mat.MSE[i,1] = mean(diff.full^2)
yhat.final = getME(mod.final.train,"X") %*% as.numeric(fixef(mod.final.train))
diff.final = ytest - yhat.final
pred.mat.bias[i,2] = mean(diff.final)
pred.mat.MSE[i,2] = mean(diff.final^2)
}
warnings()
length(ytest)
length(yhat.final)
for (i in 1:ntest){
iyr = testyrs[i]
itrain = which(rainsmall$year >= iyr-25 & rainsmall$year < iyr)
itest = which(rainsmall$year == iyr)
testX = rainsmall[itest,-c(1:3)]
#mod.full.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.full)), data=rainsmall, subset=itrain)
#mod.final.train = lm(as.formula(paste("log(PRCP+1) ~", fixed.final)), data=rainsmall, subset=itrain)
mod.full.train = update(mod.full, subset=itrain)
mod.final.train = update(mod.final, subset=itrain)
ytest = log(rainsmall$PRCP[itest]+1)
yhat.full = getME(mod.full.train,"X")[itest,] %*% as.numeric(fixef(mod.full.train))
diff.full = ytest - yhat.full
pred.mat.bias[i,1] = mean(diff.full)
pred.mat.MSE[i,1] = mean(diff.full^2)
yhat.final = getME(mod.final.train,"X")[itest,] %*% as.numeric(fixef(mod.final.train))
%*% as.numeric(fixef(mod.final.train))
diff.final = ytest - yhat.final
pred.mat.bias[i,2] = mean(diff.final)
pred.mat.MSE[i,2] = mean(diff.final^2)
}
yhat.full = getME(mod.full.train,"X")[itest,] %*% as.numeric(fixef(mod.full.train))
?merMod
model.names(mod.final)
paste(model.names(mod.final)
)
class(model.names(mod.final)
)
model.names(mod.final)attr(,"variables")
yhat.full = getME(mod.full,"X")[itest,] %*% as.numeric(fixef(mod.full.train))
yhat.final = getME(mod.final,"X")[itest,] %*% as.numeric(fixef(mod.final.train))
iyr = testyrs[i]
itrain = which(rainsmall$year >= iyr-25 & rainsmall$year < iyr)
itest = which(rainsmall$year == iyr)
testX = rainsmall[itest,-c(1:3)]
mod.full.train = update(mod.full, subset=itrain)
mod.final.train = update(mod.final, subset=itrain)
ytest = log(rainsmall$PRCP[itest]+1)
yhat.full = getME(mod.full,"X")[itest,] %*% as.numeric(fixef(mod.full.train))
diff.full = ytest - yhat.full
pred.mat.bias[i,1] = mean(diff.full)
pred.mat.MSE[i,1] = mean(diff.full^2)
yhat.final = getME(mod.final,"X")[itest,] %*% as.numeric(fixef(mod.final.train))
%*% as.numeric(fixef(mod.final.train))
diff.final = ytest - yhat.final
pred.mat.bias[i,2] = mean(diff.final)
pred.mat.MSE[i,2] = mean(diff.final^2)
for (i in 1:ntest){
iyr = testyrs[i]
itrain = which(rainsmall$year >= iyr-25 & rainsmall$year < iyr)
itest = which(rainsmall$year == iyr)
testX = rainsmall[itest,-c(1:3)]
mod.full.train = update(mod.full, subset=itrain)
mod.final.train = update(mod.final, subset=itrain)
ytest = log(rainsmall$PRCP[itest]+1)
yhat.full = getME(mod.full,"X")[itest,] %*% as.numeric(fixef(mod.full.train))
diff.full = ytest - yhat.full
pred.mat.bias[i,1] = mean(diff.full)
pred.mat.MSE[i,1] = mean(diff.full^2)
yhat.final = getME(mod.final,"X")[itest,] %*% as.numeric(fixef(mod.final.train))
diff.final = ytest - yhat.final
pred.mat.bias[i,2] = mean(diff.final)
pred.mat.MSE[i,2] = mean(diff.final^2)
}
plot(pred.mat.MSE[,1]~testyrs, type="b", ylim=c(0,ceiling(max(pred.mat.MSE[,1]))), lwd=2,
xlab="year", ylab="MSE")
lines(pred.mat.MSE[,2]~testyrs, type="b", lty=2, lwd=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
plot(pred.mat.bias[,1]~testyrs, type="b", ylim=c(-3,3), lwd=2,
xlab="year", ylab="Bias")
lines(pred.mat.bias[,2]~testyrs, type="b", lty=2, lwd=2)
abline(h=0, lty=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
plot(density(ytest), xlim=c(-2,10), ylim=c(0,.5), lwd=2,
xlab="log(PRCP+1)", ylab="density", main="Year 2012")
lines(density(yhat.full), col='red', lwd=2)
lines(density(yhat.final), col='blue', lwd=2)
legend("topright", c("Truth", "Full model pred", "Reduced model pred"),
col=c('black','red','blue'), lty=1, lwd=2)
pdf('rolling_predMSE_full_vs_reduced_gamma.pdf',5,5)
plot(pred.mat.MSE[,1]~testyrs, type="b", ylim=c(0,ceiling(max(pred.mat.MSE[,1]))), lwd=2,
xlab="year", ylab="MSE")
lines(pred.mat.MSE[,2]~testyrs, type="b", lty=2, lwd=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
dev.off()
pdf('rolling_predbias_full_vs_reduced_gamma.pdf',5,5)
plot(pred.mat.bias[,1]~testyrs, type="b", ylim=c(-3,3), lwd=2,
xlab="year", ylab="Bias")
lines(pred.mat.bias[,2]~testyrs, type="b", lty=2, lwd=2)
abline(h=0, lty=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
dev.off()
pdf('rolling_density2012_full_vs_reduced_gamma.pdf',5,5)
plot(density(ytest), xlim=c(-2,10), ylim=c(0,.5), lwd=2,
xlab="log(PRCP+1)", ylab="density", main="Year 2012")
lines(density(yhat.full), col='red', lwd=2)
lines(density(yhat.final), col='blue', lwd=2)
legend("topright", c("Truth", "Full model pred", "Reduced model pred"),
col=c('black','red','blue'), lty=1, lwd=2)
dev.off()
lat.list
library(maps)
library(maptools)
r.final = ytest - yhat.final
q.final = quantile(r.final, c(.05,.25,.75,.95))
pdf('rolling_map2012_full_vs_reduced_gamma.pdf',5,5)
defaultPar = par()
par(mar=rep(0,4))
India <- map("world", ylim=c(8,38), xlim=c(68,98))
title("2012")
points(long.list, lat.list, pch=ifelse(r.final<0, 19, 17),
cex=ifelse(r.final < q.final[1] | r.final > q.final[4], 2,
ifelse(r.final < q.final[2] | r.final > q.final[3], 1, 0.75)),
col=ifelse(r.final<0, "black", "red"))
legend('topright', c("Positive resid", "negative resid"),
pch=c(17,19), col=c("red", "black"), bty="n")
par(defaultPar)
dev.off()
load('bestmodel.rda')
best.index = which.min(lapply(outputs, function(x) x[[3]]))
Cn.frame = outputs[[best.index]][[1]]
mod.final = outputs[[best.index]][[2]]
summary(mod.final)
anova(mod.final)
r.squaredGLMM(mod.final)
anova(mod.final, mod.full)
testyrs = 2003:2012
ntest = length(testyrs)
pred.mat.MSE = matrix(0, ncol=2, nrow=ntest)
pred.mat.bias = pred.mat.MSE
for (i in 1:ntest){
iyr = testyrs[i]
itrain = which(rainsmall$year >= iyr-25 & rainsmall$year < iyr)
itest = which(rainsmall$year == iyr)
testX = rainsmall[itest,-c(1:3)]
mod.full.train = update(mod.full, subset=itrain)
mod.final.train = update(mod.final, subset=itrain)
ytest = log(rainsmall$PRCP[itest]+1)
yhat.full = getME(mod.full,"X")[itest,] %*% as.numeric(fixef(mod.full.train))
diff.full = ytest - yhat.full
pred.mat.bias[i,1] = mean(diff.full)
pred.mat.MSE[i,1] = mean(diff.full^2)
yhat.final = getME(mod.final,"X")[itest,] %*% as.numeric(fixef(mod.final.train))
diff.final = ytest - yhat.final
pred.mat.bias[i,2] = mean(diff.final)
pred.mat.MSE[i,2] = mean(diff.final^2)
}
plot(pred.mat.MSE[,1]~testyrs, type="b", ylim=c(0,ceiling(max(pred.mat.MSE[,1]))), lwd=2,
xlab="year", ylab="MSE")
lines(pred.mat.MSE[,2]~testyrs, type="b", lty=2, lwd=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
plot(pred.mat.bias[,1]~testyrs, type="b", ylim=c(-3,3), lwd=2,
xlab="year", ylab="Bias")
lines(pred.mat.bias[,2]~testyrs, type="b", lty=2, lwd=2)
abline(h=0, lty=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
pdf('rolling_predMSE_full_vs_reduced_gamma.pdf',5,5)
plot(pred.mat.MSE[,1]~testyrs, type="b", ylim=c(0,ceiling(max(pred.mat.MSE[,1]))), lwd=2,
xlab="year", ylab="MSE")
lines(pred.mat.MSE[,2]~testyrs, type="b", lty=2, lwd=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
dev.off()
pdf('rolling_predbias_full_vs_reduced_gamma.pdf',5,5)
plot(pred.mat.bias[,1]~testyrs, type="b", ylim=c(-3,3), lwd=2,
xlab="year", ylab="Bias")
lines(pred.mat.bias[,2]~testyrs, type="b", lty=2, lwd=2)
abline(h=0, lty=2)
legend("topleft", c("Full model", "Reduced model"), lty=1:2, lwd=2)
dev.off()
pdf('rolling_density2012_full_vs_reduced_gamma.pdf',5,5)
plot(density(ytest), xlim=c(-2,10), ylim=c(0,.5), lwd=2,
xlab="log(PRCP+1)", ylab="density", main="Year 2012")
lines(density(yhat.full), col='red', lwd=2)
lines(density(yhat.final), col='blue', lwd=2)
legend("topright", c("Truth", "Full model pred", "Reduced model pred"),
col=c('black','red','blue'), lty=1, lwd=2)
dev.off()
library(maps)
library(maptools)
r.final = ytest - yhat.final
q.final = quantile(r.final, c(.05,.25,.75,.95))
pdf('rolling_map2012_full_vs_reduced_gamma.pdf',5,5)
defaultPar = par()
par(mar=rep(0,4))
India <- map("world", ylim=c(8,38), xlim=c(68,98))
title("2012")
points(long.list, lat.list, pch=ifelse(r.final<0, 19, 17),
cex=ifelse(r.final < q.final[1] | r.final > q.final[4], 2,
ifelse(r.final < q.final[2] | r.final > q.final[3], 1, 0.75)),
col=ifelse(r.final<0, "black", "red"))
legend('topright', c("Positive resid", "negative resid"),
pch=c(17,19), col=c("red", "black"), bty="n")
par(defaultPar)
dev.off()
setwd('D:/Study/My projects/Climate-indian-monsoon/Codes')
library(rrcov)
library(fda.usc)
library(lme4)
# library(MuMIn)
library(parallel)
# read in data
# rainsmall = read.csv("../data/rainsmall.csv")
rainsmall = read.csv("rainsmall.csv")
# check full model
rainsmall[-(1:3)] = scale(rainsmall[-(1:3)])
trainset = which(rainsmall$year<2003)
testset = which(rainsmall$year>=2003)
rainsmall = read.csv("../Data/rainsmall.csv")
rainsmall[-(1:3)] = scale(rainsmall[-(1:3)])
trainset = which(rainsmall$year<2003)
testset = which(rainsmall$year>=2003)
dim(trainset)
length(trainset)
