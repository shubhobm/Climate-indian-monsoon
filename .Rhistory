class(t(iX))
v = t(iX) %*% iX
dim(t(iX))
XtX.inv = solve(t(iX) %*% as.matrix(iX))
solve(t(iX) %*% as.matrix(iX))
class(X)
t(X) %*% X
View(X)
bmd = read.table("bmd_bl.txt")
View(bmd)
bmd = within(bmd, {
treat = factor(treat)
gender = mapvalues(gender, from=c(1,2), to=c("M","F"))
vitD = mapvalues(vitD, from=c(1,2,3), to=c("low","medlow","high"))
steroids = mapvalues(steroids, from=c(0,1), to=c("no","yes"))
})
names(bmd)
names(bmd.hip)
bmd = read.table("bmd_bl.txt")
# bmd = within(bmd, {
#   treat = factor(treat)
#   gender = mapvalues(gender, from=c(1,2), to=c("M","F"))
#   vitD = mapvalues(vitD, from=c(1,2,3), to=c("low","medlow","high"))
#   steroids = mapvalues(steroids, from=c(0,1), to=c("no","yes"))
# })
bmd.hip = bmd[,-c(1,2,10,12)]
bmd.spine = bmd[,-c(1,2,10,11)]
X = as.matrix(bmd.hip[,-9])
y = as.numeric(bmd.hip[,9])
# bootstrap function
n = nrow(X)
m = ceiling(n^(.9))
p = ncol(X)
nbot = 100
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
X = as.matrix(bmd.hip[,-9])
y = as.numeric(bmd.hip[,9])
bmd.hip[,9]
bmd.hip[1,9]
dim(bmd.hip)
X = as.matrix(bmd.hip[,-8])
y = as.numeric(bmd.hip[,8])
n = nrow(X)
m = ceiling(n^(.9))
p = ncol(X)
nbot = 100
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
# loop for full model bootstrap
# to get bootstrap distribution of parameters
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
SSPmat.d[,p+1] = mdepth.RP(beta.mat, beta.mat)$dep
SSPmat.d[,p+1]
hist(SSPmat.d[,p+1])
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
}
apply(SSPmat.d, 2, mean)
names(bmi.hip)
names(bmd.hip)
View(bmd.hip)
X = as.matrix(bmd.hip[,-8])
y = as.numeric(bmd.hip[,8])
# bootstrap function
n = nrow(X)
m = ceiling(n^(.5))
p = ncol(X)
nbot = 1e2
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
# loop for full model bootstrap
# to get bootstrap distribution of parameters
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
SSPmat.d[,p+1] = mdepth.RP(beta.mat, beta.mat)$dep
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
}
apply(SSPmat.d, 2, mean)
m
n
n = nrow(X)
m = ceiling(n^(.7))
p = ncol(X)
nbot = 1e2
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
# loop for full model bootstrap
# to get bootstrap distribution of parameters
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
SSPmat.d[,p+1] = mdepth.RP(beta.mat, beta.mat)$dep
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
}
apply(SSPmat.d, 2, mean)
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(ibeta, beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(ibeta, beta.mat)$dep
mdepth.RP(ibeta, beta.mat)$dep
dim(beta.mat)
ieta
ibeta
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
mdepth.RP(as.numeric(ibeta), beta.mat)$dep
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
nbot = 1e3
n = nrow(X)
m = ceiling(n^(.7))
p = ncol(X)
nbot = 1e3
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
View(SSPmat.d)
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
p
i
mdepth.RP(as.numeric(ibeta), beta.mat)$dep
ibeta
View(beta.mat)
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
apply(SSPmat.d, 2, mean)
View(beta.mat)
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
XtX.inv = solve(t(X) %*% as.matrix(X))
beta = XtX.inv %*% t(X) %*% y
XtX.inv = solve(t(X) %*% as.matrix(X))
beta = XtX.inv %*% t(X) %*% y
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
beta = as.numeric(XtX.inv %*% t(X) %*% y)
# loop for full model bootstrap
# to get bootstrap distribution of parameters
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
#     SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
#   ibeta = XtX.inv %*% t(iX) %*% iyb
#   SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
SSPmat.d[,p+1]
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
nbot = 1e3
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
# loop for full model bootstrap
# to get bootstrap distribution of parameters
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
dim(SSPmat.d)
nboot = 1e3
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
# loop for full model bootstrap
# to get bootstrap distribution of parameters
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
X = as.matrix(bmd.spine[,-8])
y = as.numeric(bmd.spine[,8])
# bootstrap function
n = nrow(X)
m = ceiling(n^(.7))
p = ncol(X)
nboot = 1e3
SSPmat = matrix(0, nrow=nboot, ncol=p+1)
SSPmat.d = SSPmat
beta.mat = matrix(0, nrow=nboot, ncol=p)
# loop for full model bootstrap
# to get bootstrap distribution of parameters
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
#	ibeta = glm.fit(x=iX, y=iyb, family=binomial())$coef
XtX.inv = solve(t(iX) %*% as.matrix(iX))
ibeta = XtX.inv %*% t(iX) %*% iyb
beta.mat[i,] = ibeta
}
#SSPmat.d[,p+1] = 1/(1 + diag((beta.mat - beta) %*% XtX.inv %*% t(beta.mat - beta)))
## loop to get drop 1 bootstrap estimates
for(i in 1:nboot){
iind = sample(1:n, m, replace=T)
iX = X[iind,]
iyb = y[iind]
XtX.inv = solve(t(iX)%*%iX)
for(j in 1:p){
iXj = iX[,-j]
ibeta.j = solve(t(iXj) %*% iXj) %*% t(iXj) %*% iyb
# get depth-based criterion
ibeta.j.full = rep(0,p)
ibeta.j.full[-j] = ibeta.j
#    SSPmat.d[i,j] = 1/(1 + t(ibeta.j.full - beta) %*% XtX.inv %*% (ibeta.j.full - beta))
SSPmat.d[i,j] = mdepth.RP(ibeta.j.full, beta.mat)$dep
}
# for full model
ibeta = XtX.inv %*% t(iX) %*% iyb
SSPmat.d[i,p+1] = mdepth.RP(as.numeric(ibeta), beta.mat)$dep
}
apply(SSPmat.d, 2, mean)
